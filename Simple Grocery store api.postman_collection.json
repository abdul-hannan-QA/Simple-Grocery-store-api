{
	"info": {
		"_postman_id": "a8034f0c-23a0-47ad-849f-f86dec218b66",
		"name": "Simple Grocery store api",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "14991602",
		"_collection_link": "https://cloudy-rocket-989559.postman.co/workspace/myworkspace~e30476b4-fb4a-4c99-a650-8d4c09531852/collection/14991602-a8034f0c-23a0-47ad-849f-f86dec218b66?action=share&source=collection_link&creator=14991602"
	},
	"item": [
		{
			"name": "Happy path",
			"item": [
				{
					"name": "API Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products?results=5&category=coffee",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "results",
									"value": "5"
								},
								{
									"key": "category",
									"value": "coffee"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get single products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"product name\",  () => {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.name).to.eql(\"Starbucks Coffee Variety Pack, 100% Arabica\");\r",
									"    console.log(response.name);\r",
									"});\r",
									"\r",
									"pm.test(\"product price\",  () => {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.price).to.eql(40.91);\r",
									"    pm.expect(response.price).to.be.a('number')\r",
									"        pm.expect(response.price).to.be.above(0);\r",
									"        \r",
									"    console.log(response.price);\r",
									"});\r",
									"\r",
									"pm.test(\"product in stock\",  () => {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.inStock).to.eql(true);\r",
									"    console.log(response.inStock);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"console.log(response.id);\r",
									"pm.environment.set(\"productId\",response.id);\r",
									"//or we can write like this \r",
									"/*\r",
									" pm.test(\"At least one product is available \",  () => {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"    pm.expect(response).to.haveOwnProperty(\"id\");\r",
									"    console.log(response.id);\r",
									"    pm.collectionVariables.set(\"productId\",response.id);\r",
									"});\r",
									"});*/\r",
									"pm.test(\"correct product was retrived \", () => {\r",
									"    const productId = pm.environment.get('productId');\r",
									"    console.log(productId);\r",
									"    pm.expect(response.id).to.eql(productId);\r",
									"\r",
									"\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/:productId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								":productId"
							],
							"variable": [
								{
									"key": "productId",
									"value": "{{productId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a new cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 2001\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"const res=pm.response.json();\r",
									"pm.environment.set(\"cartId\", res.cartId);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/carts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"carts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/carts/:cartId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"carts",
								":cartId"
							],
							"variable": [
								{
									"key": "cartId",
									"value": "{{cartId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get cart items",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/carts/:cartId/items",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"carts",
								":cartId",
								"items"
							],
							"variable": [
								{
									"key": "cartId",
									"value": "{{cartId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add item to cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Item created successfully\", function () {\r",
									"    pm.expect(response.created).to.be.true;\r",
									"    pm.expect(response.itemId).to.be.a('number');   // check itemId is a number\r",
									"    pm.environment.set(\"itemId\", response.itemId); // save itemId to environment\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\r\n\"productId\": {{productId}}\r\n\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/carts/:cartId/items",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"carts",
								":cartId",
								"items"
							],
							"variable": [
								{
									"key": "cartId",
									"value": "{{cartId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update quantity",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function getRandomNumber(maxValue) {\r",
									"    return Math.floor(Math.random() * maxValue);\r",
									"}\r",
									"\r",
									"// Check if an environment is selected\r",
									"if (pm.environment.name) {\r",
									"    // Set in Environment\r",
									"    pm.environment.set(\"randomQuantity\", getRandomNumber(14));\r",
									"    console.log(\"randomQuantity set in Environment: \" + pm.environment.get(\"randomQuantity\"));\r",
									"} else {\r",
									"    // Set in Collection Variables\r",
									"    pm.collectionVariables.set(\"randomQuantity\", getRandomNumber(14));\r",
									"    console.log(\"randomQuantity set in Collection Variables: \" + pm.collectionVariables.get(\"randomQuantity\"));\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"quantity\" : {{randomQuantity}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/carts/:cartId/items/:itemId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"carts",
								":cartId",
								"items",
								":itemId"
							],
							"variable": [
								{
									"key": "cartId",
									"value": "{{cartId}}"
								},
								{
									"key": "itemId",
									"value": "{{itemId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Register Api client",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function getTimestampEmail() {\r",
									"    const timestamp = Date.now();\r",
									"    return `deeptest_${timestamp}@example.com`;\r",
									"}\r",
									"let tempEmail = getTimestampEmail();\r",
									"pm.variables.set(\"tempEmail\", tempEmail);\r",
									"\r",
									"console.log(\"random Email is created\",tempEmail)\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"clientName\": \"Postman\",\r\n   \"clientEmail\": \"{{tempEmail}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api-clients",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api-clients"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create an order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"order was created\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.be.an(\"object\");\r",
									"    pm.environment.set(\"orderId\", response.orderId);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"customerName\": \"Abdul Hannan\",\r\n    \"cartId\": \"{{cartId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"console.log(response);\r",
									"console.log(Array.isArray(response));\r",
									"console.log(pm.environment.get(\"orderId\"));\r",
									"for (let i = 0; i < response.length; i++) {\r",
									"    if (response[i].id === pm.environment.get(\"orderId\")) {\r",
									"        console.log(\"product id found in the response body\");\r",
									"    }\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"customerName\": \"Abdul Hannan one \",\r\n     \"comment\": \"Pick up at 2 pm\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders/:orderid",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								":orderid"
							],
							"variable": [
								{
									"key": "orderid",
									"value": "{{orderId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update quantity",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function getRandomNumber(maxValue) {\r",
									"    return Math.floor(Math.random() * maxValue);\r",
									"}\r",
									"\r",
									"pm.collectionVariables.set(\"randomQuantity\", getRandomNumber(14));\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"quantity\" : {{randomQuantity}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/carts/:cartId/items/:itemId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"carts",
								":cartId",
								"items",
								":itemId"
							],
							"variable": [
								{
									"key": "cartId",
									"value": "{{cartId}}"
								},
								{
									"key": "itemId",
									"value": "{{itemId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Repalce product in cart",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"quantity\" : 3,\r\n     \"productId\" : {{productId}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/carts/:cartId/items/:itemId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"carts",
								":cartId",
								"items",
								":itemId"
							],
							"variable": [
								{
									"key": "cartId",
									"value": "{{cardId}}"
								},
								{
									"key": "itemId",
									"value": "568661822"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete item in cart",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"quantity\" : {{randomQuantity}},\r\n     \"productId\" : {{productId}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/carts/:cartId/items/:itemId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"carts",
								":cartId",
								"items",
								":itemId"
							],
							"variable": [
								{
									"key": "cartId",
									"value": "{{cartId}}"
								},
								{
									"key": "itemId",
									"value": "{{itemId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete order",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"quantity\" : {{randomQuantity}},\r\n     \"productId\" : {{productId}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders/:orderId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "{{orderId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get single order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Error message contain the deleted order id\", function () {\r",
									"\r",
									"    const response = pm.response.json();\r",
									"\r",
									"    pm.expect(response).to.haveOwnProperty(\"error\");\r",
									"    pm.expect(response.error).to.contains(pm.variables.get(\"orderId\"));\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders/:orderId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "{{orderId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Missing authentication",
			"item": [
				{
					"name": "Missing Header",
					"item": [
						{
							"name": "Add item to cart Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Item created successfully\", function () {\r",
											"    pm.expect(response.created).to.be.true;\r",
											"    pm.expect(response.itemId).to.be.a('number');   // check itemId is a number\r",
											"    pm.environment.set(\"itemId\", response.itemId); // save itemId to environment\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\r\n\"productId\": {{productId}}\r\n\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/carts/:cartId/items",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"carts",
										":cartId",
										"items"
									],
									"variable": [
										{
											"key": "cartId",
											"value": "{{cartId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create an order -missing header",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"customerName\": \"Abdul Hannan\",\r\n    \"cartId\": \"{{cartId}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/orders",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"pm.test(\"Response body contains 'error': 'Missing Authorization header.'\", function () {\r",
									"\r",
									"    const response=pm.response.json();\r",
									"    pm.expect(response.error).to.eql(\"Missing Authorization header.\");\r",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "invalid token",
					"item": [
						{
							"name": "Create an order -invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "wrong token for script",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"customerName\": \"Abdul Hannan\",\r\n    \"cartId\": \"{{cartId}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/orders",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"pm.test(\"Response body contains 'error': 'wrong token.'\", function () {\r",
									"\r",
									"    const response=pm.response.json();\r",
									"    pm.expect(response.error).to.eql(\"Invalid bearer token.\");\r",
									"});\r",
									""
								]
							}
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "productId",
			"value": ""
		},
		{
			"key": "cartId",
			"value": ""
		},
		{
			"key": "orderId",
			"value": ""
		},
		{
			"key": "itemId",
			"value": ""
		},
		{
			"key": "randomQuantity",
			"value": ""
		}
	]
}